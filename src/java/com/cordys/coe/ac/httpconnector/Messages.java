/**
 * Copyright 2006 Cordys R&D B.V. 
 * 
 * This file is part of the Cordys HTTP Connector. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 package com.cordys.coe.ac.httpconnector;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class Messages
{
	/**
	 * Holds the definition of the message set.
	 */
	public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.httpconnector.Messages");

	/**
	 * Holds the definition of the message with ID connectorManagementDescription.
	 * Message text:
	 * HttpConnector connector
	 */
	public static final Message CONNECTOR_MANAGEMENT_DESCRIPTION = MESSAGE_SET.getMessage("connectorManagementDescription");
	/**
	 * Holds the definition of the message with ID coelibVersionMismatch.
	 * Message text:
	 * Coelib version mismatch.
	 */
	public static final Message COELIB_VERSION_MISMATCH = MESSAGE_SET.getMessage("coelibVersionMismatch");
	/**
	 * Holds the definition of the message with ID connectorStarting.
	 * Message text:
	 * Starting HttpConnector connector
	 */
	public static final Message CONNECTOR_STARTING = MESSAGE_SET.getMessage("connectorStarting");
	/**
	 * Holds the definition of the message with ID connectorStarted.
	 * Message text:
	 * HttpConnector connector started.
	 */
	public static final Message CONNECTOR_STARTED = MESSAGE_SET.getMessage("connectorStarted");
	/**
	 * Holds the definition of the message with ID connectorStartException.
	 * Message text:
	 * An error occurred while starting the HttpConnector connector.
	 */
	public static final Message CONNECTOR_START_EXCEPTION = MESSAGE_SET.getMessage("connectorStartException");
	/**
	 * Holds the definition of the message with ID connectorStopped.
	 * Message text:
	 * HttpConnector connector stopped.
	 */
	public static final Message CONNECTOR_STOPPED = MESSAGE_SET.getMessage("connectorStopped");
	/**
	 * Holds the definition of the message with ID connectorReset.
	 * Message text:
	 * Resetting HttpConnector connector
	 */
	public static final Message CONNECTOR_RESET = MESSAGE_SET.getMessage("connectorReset");
	/**
	 * Holds the definition of the message with ID transactionAbort.
	 * Message text:
	 * Aborted the transaction.
	 */
	public static final Message TRANSACTION_ABORT = MESSAGE_SET.getMessage("transactionAbort");
	/**
	 * Holds the definition of the message with ID transactionCommit.
	 * Message text:
	 * Committed the transaction.
	 */
	public static final Message TRANSACTION_COMMIT = MESSAGE_SET.getMessage("transactionCommit");
	/**
	 * Holds the definition of the message with ID transactionError.
	 * Message text:
	 * An error occurred while processing the SOAP request: {0}
	 */
	public static final Message TRANSACTION_ERROR = MESSAGE_SET.getMessage("transactionError");

}