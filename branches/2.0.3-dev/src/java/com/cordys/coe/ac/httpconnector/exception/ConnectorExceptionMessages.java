/**
 * Copyright 2006 Cordys R&D B.V. 
 * 
 * This file is part of the Cordys HTTP Connector. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 package com.cordys.coe.ac.httpconnector.exception;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class ConnectorExceptionMessages
{
	/**
	 * Holds the definition of the message set.
	 */
	public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.httpconnector.exception.ConnectorExceptionMessages");

	/**
	 * Holds the definition of the message with ID ERROR_PARSING_THE_HTML_RESPONSE.
	 * Message text:
	 * Error parsing the HTML response
	 */
	public static final Message ERROR_PARSING_THE_HTML_RESPONSE = MESSAGE_SET.getMessage("ERROR_PARSING_THE_HTML_RESPONSE");
	/**
	 * Holds the definition of the message with ID THE_NAME_OF_THE_PARAMETER_MUST_BE_FILLED.
	 * Message text:
	 * The 'name' of the parameter must be filled.
	 */
	public static final Message THE_NAME_OF_THE_PARAMETER_MUST_BE_FILLED = MESSAGE_SET.getMessage("THE_NAME_OF_THE_PARAMETER_MUST_BE_FILLED");
	/**
	 * Holds the definition of the message with ID THE_PARAMETER_0_HAS_NO_CHILD_ELEMENT.
	 * Message text:
	 * The parameter {0} has no child element.
	 */
	public static final Message THE_PARAMETER_0_HAS_NO_CHILD_ELEMENT = MESSAGE_SET.getMessage("THE_PARAMETER_0_HAS_NO_CHILD_ELEMENT");
	/**
	 * Holds the definition of the message with ID THE_RESPONSE_XML_DID_NOT_MATCH_THE_VALID_RESPONSE_XPATH_THAT_WAS_CONFIGURED_IN_THE_METHOD_IMPLEMENTATION.
	 * Message text:
	 * The response XML did not match the 'Valid response XPath' that was configured in the method implementation.
	 */
	public static final Message THE_RESPONSE_XML_DID_NOT_MATCH_THE_VALID_RESPONSE_XPATH_THAT_WAS_CONFIGURED_IN_THE_METHOD_IMPLEMENTATION = MESSAGE_SET.getMessage("THE_RESPONSE_XML_DID_NOT_MATCH_THE_VALID_RESPONSE_XPATH_THAT_WAS_CONFIGURED_IN_THE_METHOD_IMPLEMENTATION");
	/**
	 * Holds the definition of the message with ID THE_VALUE_FOR_PARAMETER_0_IS_EMPTY.
	 * Message text:
	 * The value for parameter {0} is empty
	 */
	public static final Message THE_VALUE_FOR_PARAMETER_0_IS_EMPTY = MESSAGE_SET.getMessage("THE_VALUE_FOR_PARAMETER_0_IS_EMPTY");
	/**
	 * Holds the definition of the message with ID BOTH_FILE_AND_XMLSTORE_ATTRIBUTES_CANNOT_BE_SET_FOR_XSLT.
	 * Message text:
	 * Both file and xmlstore attributes cannot be set for XSLT.
	 */
	public static final Message BOTH_FILE_AND_XMLSTORE_ATTRIBUTES_CANNOT_BE_SET_FOR_XSLT = MESSAGE_SET.getMessage("BOTH_FILE_AND_XMLSTORE_ATTRIBUTES_CANNOT_BE_SET_FOR_XSLT");
	/**
	 * Holds the definition of the message with ID CONFIGURATION_FILE_NOT_FOUND_FROM_XMLSTORE_0.
	 * Message text:
	 * Configuration file not found from XMLStore: {0}
	 */
	public static final Message CONFIGURATION_FILE_NOT_FOUND_FROM_XMLSTORE_0 = MESSAGE_SET.getMessage("CONFIGURATION_FILE_NOT_FOUND_FROM_XMLSTORE_0");
	/**
	 * Holds the definition of the message with ID CONFIGURATION_FILE_NOT_SET_FOR_THIS_CONNECTOR.
	 * Message text:
	 * Configuration file not set for this connector.
	 */
	public static final Message CONFIGURATION_FILE_NOT_SET_FOR_THIS_CONNECTOR = MESSAGE_SET.getMessage("CONFIGURATION_FILE_NOT_SET_FOR_THIS_CONNECTOR");
	/**
	 * Holds the definition of the message with ID ERROR_EXECUTING_REQUEST_0.
	 * Message text:
	 * Error executing request: {0}
	 */
	public static final Message ERROR_EXECUTING_REQUEST_0 = MESSAGE_SET.getMessage("ERROR_EXECUTING_REQUEST_0");
	/**
	 * Holds the definition of the message with ID EXPECTED_INLINE_XSLT_CONFIGURATION.
	 * Message text:
	 * Expected inline XSLT configuration.
	 */
	public static final Message EXPECTED_INLINE_XSLT_CONFIGURATION = MESSAGE_SET.getMessage("EXPECTED_INLINE_XSLT_CONFIGURATION");
	/**
	 * Holds the definition of the message with ID HTTP_CONNECTION_FAILED_0.
	 * Message text:
	 * HTTP connection failed: {0}
	 */
	public static final Message HTTP_CONNECTION_FAILED_0 = MESSAGE_SET.getMessage("HTTP_CONNECTION_FAILED_0");
	/**
	 * Holds the definition of the message with ID HTTP_REQUEST_FAILED_0.
	 * Message text:
	 * HTTP request failed: {0}
	 */
	public static final Message HTTP_REQUEST_FAILED_0 = MESSAGE_SET.getMessage("HTTP_REQUEST_FAILED_0");
	/**
	 * Holds the definition of the message with ID INVALID_RESPONSE_CODE_VALUE_0.
	 * Message text:
	 * Invalid response code value: {0}
	 */
	public static final Message INVALID_RESPONSE_CODE_VALUE_0 = MESSAGE_SET.getMessage("INVALID_RESPONSE_CODE_VALUE_0");
	/**
	 * Holds the definition of the message with ID INVALID_RESPONSE_RECEIVED_FROM_XMLSTORE.
	 * Message text:
	 * Invalid response received from XMLStore.
	 */
	public static final Message INVALID_RESPONSE_RECEIVED_FROM_XMLSTORE = MESSAGE_SET.getMessage("INVALID_RESPONSE_RECEIVED_FROM_XMLSTORE");
	/**
	 * Holds the definition of the message with ID INVALID_RESPONSE_XML_RECEIVED.
	 * Message text:
	 * Invalid response XML received.
	 */
	public static final Message INVALID_RESPONSE_XML_RECEIVED = MESSAGE_SET.getMessage("INVALID_RESPONSE_XML_RECEIVED");
	/**
	 * Holds the definition of the message with ID INVALID_STATUS_CODE_RECEIVED_0_EXPECTED_1.
	 * Message text:
	 * Invalid status code received: {0} (expected: {1}).
	 */
	public static final Message INVALID_STATUS_CODE_RECEIVED_0_EXPECTED_1 = MESSAGE_SET.getMessage("INVALID_STATUS_CODE_RECEIVED_0_EXPECTED_1");
	/**
	 * Holds the definition of the message with ID MISSING_ATTRIBUTE_PREFIX_FROM_NAMESPACE_BINDING_ELEMENT.
	 * Message text:
	 * Missing attribute 'prefix' from namespace binding element.
	 */
	public static final Message MISSING_ATTRIBUTE_PREFIX_FROM_NAMESPACE_BINDING_ELEMENT = MESSAGE_SET.getMessage("MISSING_ATTRIBUTE_PREFIX_FROM_NAMESPACE_BINDING_ELEMENT");
	/**
	 * Holds the definition of the message with ID MISSING_ATTRIBUTE_URI_FROM_NAMESPACE_BINDING_ELEMENT.
	 * Message text:
	 * Missing attribute 'uri' from namespace binding element.
	 */
	public static final Message MISSING_ATTRIBUTE_URI_FROM_NAMESPACE_BINDING_ELEMENT = MESSAGE_SET.getMessage("MISSING_ATTRIBUTE_URI_FROM_NAMESPACE_BINDING_ELEMENT");
	/**
	 * Holds the definition of the message with ID NO_CONNECTION_FOUND_WITH_ID_0.
	 * Message text:
	 * No connection found with ID: {0}
	 */
	public static final Message NO_CONNECTION_FOUND_WITH_ID_0 = MESSAGE_SET.getMessage("NO_CONNECTION_FOUND_WITH_ID_0");
	/**
	 * Holds the definition of the message with ID UNABLE_TO_LOAD_CONFIGURATION_FROM_XMLSTORE.
	 * Message text:
	 * Unable to load configuration from XMLStore.
	 */
	public static final Message UNABLE_TO_LOAD_CONFIGURATION_FROM_XMLSTORE = MESSAGE_SET.getMessage("UNABLE_TO_LOAD_CONFIGURATION_FROM_XMLSTORE");
	/**
	 * Holds the definition of the message with ID UNABLE_TO_LOAD_RESPONSE_HANDLER_0.
	 * Message text:
	 * Unable to load response handler: {0}
	 */
	public static final Message UNABLE_TO_LOAD_RESPONSE_HANDLER_0 = MESSAGE_SET.getMessage("UNABLE_TO_LOAD_RESPONSE_HANDLER_0");
	/**
	 * Holds the definition of the message with ID CLASS_ATTRIBUTE_MISSING_FROM_THE_RESPONSE_HANDLER_ELEMENT.
	 * Message text:
	 * Class attribute missing from the response handler element.
	 */
	public static final Message CLASS_ATTRIBUTE_MISSING_FROM_THE_RESPONSE_HANDLER_ELEMENT = MESSAGE_SET.getMessage("CLASS_ATTRIBUTE_MISSING_FROM_THE_RESPONSE_HANDLER_ELEMENT");
	/**
	 * Holds the definition of the message with ID RESPONSE_HANDLER_ELEMENT_IS_NOT_SET.
	 * Message text:
	 * Response handler element is not set.
	 */
	public static final Message RESPONSE_HANDLER_ELEMENT_IS_NOT_SET = MESSAGE_SET.getMessage("RESPONSE_HANDLER_ELEMENT_IS_NOT_SET");
	/**
	 * Holds the definition of the message with ID UNABLE_TO_LOAD_REQUEST_HANDLER_0.
	 * Message text:
	 * Unable to load request handler: {0}
	 */
	public static final Message UNABLE_TO_LOAD_REQUEST_HANDLER_0 = MESSAGE_SET.getMessage("UNABLE_TO_LOAD_REQUEST_HANDLER_0");
	/**
	 * Holds the definition of the message with ID CLASS_ATTRIBUTE_MISSING_FROM_THE_REQUEST_HANDLER_ELEMENT.
	 * Message text:
	 * Class attribute missing from the request handler element.
	 */
	public static final Message CLASS_ATTRIBUTE_MISSING_FROM_THE_REQUEST_HANDLER_ELEMENT = MESSAGE_SET.getMessage("CLASS_ATTRIBUTE_MISSING_FROM_THE_REQUEST_HANDLER_ELEMENT");
	/**
	 * Holds the definition of the message with ID CONNECTION_ID_IS_NOT_SET.
	 * Message text:
	 * Connection ID is not set.
	 */
	public static final Message CONNECTION_ID_IS_NOT_SET = MESSAGE_SET.getMessage("CONNECTION_ID_IS_NOT_SET");
	/**
	 * Holds the definition of the message with ID REQUEST_HANDLER_ELEMENT_IS_NOT_SET.
	 * Message text:
	 * Request handler element is not set.
	 */
	public static final Message REQUEST_HANDLER_ELEMENT_IS_NOT_SET = MESSAGE_SET.getMessage("REQUEST_HANDLER_ELEMENT_IS_NOT_SET");
	/**
	 * Holds the definition of the message with ID THE_TAG_CONFIGPATH_MUST_BE_FILLED.
	 * Message text:
	 * The tag config-path must be filled.
	 */
	public static final Message THE_TAG_CONFIGPATH_MUST_BE_FILLED = MESSAGE_SET.getMessage("THE_TAG_CONFIGPATH_MUST_BE_FILLED");
	/**
	 * Holds the definition of the message with ID CONFIGURATION_ELEMENT_NOT_FOUND.
	 * Message text:
	 * 'Configuration' element not found.
	 */
	public static final Message CONFIGURATION_ELEMENT_NOT_FOUND = MESSAGE_SET.getMessage("CONFIGURATION_ELEMENT_NOT_FOUND");
	/**
	 * Holds the definition of the message with ID ROOTTAG_OF_THE_CONFIGURATION_SHOULD_BE_CONFIGURATION.
	 * Message text:
	 * Root-tag of the configuration should be 'configuration'
	 */
	public static final Message ROOTTAG_OF_THE_CONFIGURATION_SHOULD_BE_CONFIGURATION = MESSAGE_SET.getMessage("ROOTTAG_OF_THE_CONFIGURATION_SHOULD_BE_CONFIGURATION");
	/**
	 * Holds the definition of the message with ID CONFIGURATION_NOT_FOUND.
	 * Message text:
	 * Configuration not found
	 */
	public static final Message CONFIGURATION_NOT_FOUND = MESSAGE_SET.getMessage("CONFIGURATION_NOT_FOUND");
	/**
	 * Holds the definition of the message with ID INVALID_PROXY_SERVER_PORT_VALUE_0.
	 * Message text:
	 * Invalid proxy server port value: {0}
	 */
	public static final Message INVALID_PROXY_SERVER_PORT_VALUE_0 = MESSAGE_SET.getMessage("INVALID_PROXY_SERVER_PORT_VALUE_0");
	/**
	 * Holds the definition of the message with ID PROXY_SERVER_PORT_MUST_BE_SET.
	 * Message text:
	 * Proxy server port must be set.
	 */
	public static final Message PROXY_SERVER_PORT_MUST_BE_SET = MESSAGE_SET.getMessage("PROXY_SERVER_PORT_MUST_BE_SET");
	/**
	 * Holds the definition of the message with ID INVALID_SERVER_URL_0.
	 * Message text:
	 * Invalid server URL: {0}
	 */
	public static final Message INVALID_SERVER_URL_0 = MESSAGE_SET.getMessage("INVALID_SERVER_URL_0");
	/**
	 * Holds the definition of the message with ID CONNECTION_ELEMENT_URL_IS_MISSING.
	 * Message text:
	 * Connection element 'url' is missing.
	 */
	public static final Message CONNECTION_ELEMENT_URL_IS_MISSING = MESSAGE_SET.getMessage("CONNECTION_ELEMENT_URL_IS_MISSING");
	/**
	 * Holds the definition of the message with ID CONNECTION_ATTRIBUTE_ID_IS_MISSING.
	 * Message text:
	 * Connection attribute 'id' is missing.
	 */
	public static final Message CONNECTION_ATTRIBUTE_ID_IS_MISSING = MESSAGE_SET.getMessage("CONNECTION_ATTRIBUTE_ID_IS_MISSING");

}